/**
 * ABI Export Script
 *
 * Exports the contract ABI to the frontend src directory for easy integration.
 * Also generates TypeScript types for better DX.
 *
 * Usage: node scripts/export-abi.cjs
 */

const fs = require("fs");
const path = require("path");

async function main() {
  console.log("\n========================================");
  console.log("üì§ Exporting Contract ABI");
  console.log("========================================\n");

  // Read compiled contract artifact
  const artifactPath = path.join(
    __dirname,
    "..",
    "artifacts",
    "contracts",
    "PriceGuessBook.sol",
    "PriceGuessBook.json"
  );

  if (!fs.existsSync(artifactPath)) {
    throw new Error("Contract artifact not found. Please compile the contract first with: npx hardhat compile");
  }

  const artifact = JSON.parse(fs.readFileSync(artifactPath, "utf-8"));
  const abi = artifact.abi;

  console.log("üìù Contract ABI loaded");
  console.log(`   Functions: ${abi.filter(item => item.type === 'function').length}`);
  console.log(`   Events: ${abi.filter(item => item.type === 'event').length}`);

  // Read deployment info if exists
  let contractAddress = "0x0000000000000000000000000000000000000000";
  const deploymentPath = path.join(__dirname, "..", "deployments", "sepolia-deployment.json");

  if (fs.existsSync(deploymentPath)) {
    const deployment = JSON.parse(fs.readFileSync(deploymentPath, "utf-8"));
    contractAddress = deployment.contractAddress;
    console.log("üìç Contract Address:", contractAddress);
  } else {
    console.log("‚ö†Ô∏è  No deployment found, using placeholder address");
  }

  // Export to frontend
  const frontendConfigDir = path.join(__dirname, "..", "..", "src", "config");
  const frontendConfigPath = path.join(frontendConfigDir, "contract.ts");

  // Generate TypeScript file
  const tsContent = `/**
 * Smart Contract Configuration
 * Auto-generated by export-abi.cjs
 *
 * DO NOT EDIT MANUALLY
 * Generated at: ${new Date().toISOString()}
 */

export const CONTRACT_ADDRESS = "${contractAddress}" as \`0x\${string}\`;

export function isContractConfigured(): boolean {
  return CONTRACT_ADDRESS !== "0x0000000000000000000000000000000000000000";
}

export const CONTRACT_ABI = ${JSON.stringify(abi, null, 2)} as const;

/**
 * Gas limits for contract interactions
 * FHE operations require higher gas limits
 */
export const GAS_LIMITS = {
  placeGuess: 2_000_000n,
  claim: 1_500_000n,
  createMarket: 1_000_000n,
  settleMarket: 3_000_000n,
};

/**
 * Asset IDs for supported cryptocurrencies
 */
export const ASSET_IDS = {
  BTC: 1n,
  ETH: 2n,
  SOL: 3n,
  BNB: 4n,
} as const;

/**
 * Default asset for the terminal
 */
export const DEFAULT_ASSET_ID = ASSET_IDS.BTC;
`;

  // Ensure directory exists
  if (!fs.existsSync(frontendConfigDir)) {
    fs.mkdirSync(frontendConfigDir, { recursive: true });
  }

  // Write file
  fs.writeFileSync(frontendConfigPath, tsContent);

  console.log("\n‚úÖ ABI exported successfully!");
  console.log("üìÅ Output:", frontendConfigPath);

  // Also save raw ABI for reference
  const abiOutputPath = path.join(__dirname, "..", "deployments", "PriceGuessBook-ABI.json");
  const deploymentsDir = path.dirname(abiOutputPath);

  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }

  fs.writeFileSync(abiOutputPath, JSON.stringify(abi, null, 2));
  console.log("üìÅ Raw ABI:", abiOutputPath);

  console.log("\nüéâ Export complete!\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå Export failed:", error);
    process.exit(1);
  });
